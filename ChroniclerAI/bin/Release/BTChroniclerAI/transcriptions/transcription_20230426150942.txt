Okay, we'll get started. Let me share my screen. And before anything else, thank you guys for attending and thank you very much Irene for preparing this. Which screen do you see of mine? Confluence. Oh, confluence. Do you... Hold on just a second. I want to see if... I think I shared the wrong screen. Let me do a new share. Awesome. Okay. Do you see the flowchart? Yes, we do. Now, do you see the reporting page? Yes. Okay. Yep. So you're looking at the right screen. I'm going to get started with reporting. As we all know, that big time reporting gathers information from various database tables and construct report tables to display information as the user wanted to see it. So as a user, the workflow would be you create a report, you customize the report, and the system would generate the report behind the scene based on your configuration. And then the report gets loaded and displayed to the user in the front end. And then the user decides to customize the report, then they can go back and customize it, or for an existing report, if the user wanted to display it, then just go to the report center and then show. I'm sure you're all familiar with this big time product UI, where to create a report, you go from here, and that's your create report. And then you customize the report. And I'll go into a little more detail. Let me get the screen smaller, a little more detail. So what you're seeing here, everything that we're seeing is embedded in some database tables. So the two, three major database tables that we are dealing with is here. The three one, the STBL report view list is actually, yeah. So when you create a report, you're given a list of reports for you to choose from. So that list is stored in the view list. So everything in the view list gets displayed here. And then when you go into, I'm going to customize one of my prepared reports. So when you customize this report, everything that you see from the column, like if you try to add, everything that you see from this list for you to pick from is stored in the STB report field. And the field has these different columns, and then there's categories here. And that is displayed in here. So they're grouped by categories, and they're all here. And then I wanted to show you these tables here. So when you're looking at the field in the view list table, you can see that this is the view list has about 47 views. And that is the view that you see here. Sorry, create report. That's here. And then in the table, if you look at that, so this table contains every single attribute field that the user can select from this report. So it's everything that the user can select from here. And this table actually contains more views. If you look at this, there's actually more views than the view list gives you. The view list stops right here, and then all these other views are the ones that the user cannot select, but they get incorporated into different type of reports. So you're actually, this list is actually more than the 47 views. Some of them come from these embedded views. So the purpose for that is so that different types of report can incorporate a big group of attributes in here, like the project report can see a lot of project information. And that those kind of project information can also be available if you try to create a task type report. So that's what that is for. So we're going to do that. Okay, so much about, I think there's too many. Why is it giving me? Okay. So these are coming back to the customization, and once the user has configured the report to the way that they like, they have selected all these things, and they do a create report. So what create report does is to send all the information into a report engine in big time. So that's in our backend. Report engine then takes, this is a report engine. I have this here because this is the class name in the backend. So this report engine actually saves the report. What it does is it inserts that specific report into the report table here, into the report table as a new report, has all the information that this report will have. And then it also inserts all the columns that the user had configured. Like in my use case, it's these four columns. It inserts these columns into this table report field, and it's all linked by this new report ID. So these are the fields that will be displayed in here. And then there's more information that it will get from the STBL report table later on for displaying the actual data with the correct format and stuff. And then after these two are generated, the report engine creates a store procedure like this. So the store procedure that gets generated is created based on the information that we put in here. The three tables that gets generated, I'm just going to do this here. So this is a report. This is the report with all fields. And it joins the information from here to create a store procedure like this. So this store procedure actually has every single field that will be displayed in the actual report, plus a little bit more because of the calculation needed. So for this field, the calculation needed is actually defined in the view source. I actually skipped that. So when you define these tables, view source. So the fields that are available for the user to pick from, each field has a view source. And the view source is defined in the view source table. And you notice that there's only three view sources in here, but there's four fields. And this view source is not defined in the view source table. That is because this is a commonly used view source. A view source is basically a view, either pre-existing view or a view generated by this PrEP SQL. So if we need information, for instance, from the project, that view source, because we already have the Cori project view defined in our database, so we do not need to have a temporary view source. So what's in the PrEP SQL are temporary view sources that's needed to generate the information for this specific field. For instance, this field has a view source that the view source defines. The view source defines this because we do not have a pre-existing view to get this information. We need to have a PrEP SQL, which is a temporary table that gets generated for this specific report. So that's where it's sort of here. You only see this little bit, but if you look at the store procedure that gets generated, this one is very big. So I copied it here to show you. So that one line, this one line here is actually this whole chunk on my right side. So it's a store procedure. Sorry, it's a temporary table that gets generated for that specific report. And this one, the report engine reads it and inserts it somewhere in the store procedure that it creates for the specific report. So the store procedure looks like this. The report engine actually reads every single line, every single field, parses them, and finally generates the store procedure, which looks like this. If you look at the temporary table, it's being used down here somewhere. Yeah, it's being used down here. So every field in here in the source has some meaning. And usually through the debugger, you would know what to put in here and here. But if you're looking at the store procedure, you can see that the left join and the right joins, they are actually used here. For this, I don't want to go into too much detail, but to use this temporary table and the left join, the right join is what you put on this side and what to put on the other side. This is the right join. This is the left join for this temporary table, something like that. So if you were to design a new field that requires a temporary table, that's how you do it. And then again, this source ID, once you create it, is being used in here to get this field. Sometimes the field, you can just take the value from the temporary table or from the source like that. Sometimes you need to have a little bit of calculation based on a case statement. So field by field is different. So going back to our table, so now that we have generated the store procedure, and this will be saved, that's the final step for creating the report. So now your report is created and you can display it like this. So the actual display, I'm not going to go into the display. The display is done by the object grid table, collect table. But also it reads information from here, going to the loading of the report. This here is the generated report I just showed you. Store procedure, the fields that will be displayed, and then the field, the table that's used to generate this table. Also, there's two smaller tables here. Also, it's important, these tables store the information where you do the filter. So if you, let's say if you have this, you set up your filter and you set up your settings, and those information are stored for this report in these tables. They're all linked by the same report set. So this report will know about the filter that will be read by the report loader. The loading of the report, this is the last bit. So once we generate the report and we wanted to show a report, this is our front end JavaScript. So from the JavaScript, there's three calls to get the final report down here. So first we ask for the report itself, and then it gets the information from the report table. And then once we get that, and we get the report schema from the table report field. And here we're joining the information from both fields because of the format and how we display them, you know, whatever formula that's used for the case statement for a field to get it from the source. That's all. But yeah, so we need to load all that from the report field plus the report, the stb report field. So we have a complete schema to display and then the last call is to load the data. So get the data, the actual numbers into the data structure, into the role, into the object so that the front end, the grid table will be able to read that information and display it here. I think that's what I have. Do you have any questions? I feel very smarter today. As I said, we've all worked with reports here and there. I believe a lot of people already know the details about the report. I am learning all the fields like even now because every time I get a ticket, there's a little bit something like last time I got a ticket that the sum amount is incorrect. It's not averaging correctly. And that is because each field actually has very deep meaning to how the field is interpolated by the report engine and the front end. So the front end reads these total types and averages or sums this amount based on that. But depending on the formula of here, of how this, because this field, this field, pretending this field is using a formula that is not coming straight like by one number, but a number divided by another number. So those numbers would be actually, I'm just going to show it to you right here. So if you look at, so total number five is average. For most of our fields, they're like either nothing or some, but average, a group average means that at the end it needs like subgroup or group, it needs to be averaged. But depending on how your field is being calculated, because this formula is also read by the front end to display this final column. Let's say this is the column. It actually, this is one of the column that gets displayed or not on the same report, but it comes, it's loaded to the report because it's part of this skill procedure, right? To finally calculate your, your, this 2,500. Let's pretend this is the rule. So depending on what the type is for each of these fields, this can be either averaged or some. I don't want to, again, to go into too much detail, but you got to be careful of what the total types are. The total, so the total type is, I think it's for this type and total type two is for the subgroup, depending on how you group these. I'm still a little fuzzy about them, but so each, I just wanted to stress that each field actually has very significant impact on how your report will come up. And the, I think sort category is how your, this is easy, right? This is like, where does your field is located within your sub, your, your subcategory. This is a third order. And then I think this is, don't know what that is. Some, some, some sort. And then this is your type, whether your column is a integer or float. Another very important column is the NUM format. I think a lot of people have worked with a NUM format because we've introduced quite a few more NUM format as when we first joined there's currency dates and these, but now we have currency PRJ, currency FX to show foreign currency, currency ISO, like inverse. So this NUM format is actually read by the front end to display your, to display the actual number for the table grid. This, so sometimes we would show a symbol with Euro, like that's your base currency with an expense incurred. We would show the expense incurred currency in, so all these are controlled by this NUM format. And sometimes we get a crash because the structure that the, the, the data that we have, we're loading basically the store procedure does not include the currency ISO, then it'll crash because that's a bug. We need, we need to modify the store procedure for this report to include all the necessary information to display all columns. There's something important I forgot to mention. I don't remember, but yeah, so anyway, each one has some, some meaning. Oh, view type. So view type, so we're talking about reports. View type also, if you look at the, this thing, so with all the fields that we're interested in, there's view types that are, we mentioned the view type that the user can see, which is up to 40 something. Oh, sorry. Yeah. Up to 47, these are all the views that the user can choose. And then these embedded views that these views are embedded into different types of reports once you're in customization. I think these 500s are used by the, the grid tables. So this, so everything that we display in our, like a grid tables are also defined in this table. So if you're not in reports, you're in project, like if you want to go like this table, so every, all the fields that are here are also defined in this one. These are the view numbers for each of these tables. I think Josh can say a lot more about that. So so that's what the 500 they, they are. Yeah, I think that's a whole different topic by itself of the grid tables. So the, the, if you customize it, you can also customize it. I think these are also showing for you because it's defined in these views. That's why they're, they're, they're here. And once you select something, you customize this table and they get inserted in here and that is stored not in the report field, but it's in a, I think it's called a TBL grid or something. So it's a different one to contain your customized grid. But we won't talk about that. So for now, I'm just going to go over this real quick. The important tables for customization are report view list that gives you all the possible views to choose from report fields that gives you all the possible fields in each of the views and the source defines your like how each field is getting the information from a view or a temporary table. This one defines that. And then for generating the report, the reason I have the screenshot in here is this is a very important breakpoint. So a lot of times you see like when you try to customize something, you, you hit the create report button, you see error generating report. That is because it's failing running the store procedure you, the engine just created. Most likely is because you have some bugs in, in the table. So now you have to debug it. And that's where you want us to set a breakpoint in this, in this here. Because this will tell you which attribute is wrong and that you also have a chance to grab the SQL that will generate your store procedure and debug from there. Okay, so now generating the report, you generate the report and the report field, and then the store procedure that displays the final report. And now loading the report, JavaScript, load the report, load the report schema, load the report data, finally display. So that's all I have today. Any more questions? Yeah, I've, I've worked quite a few with the report fields. I haven't really worked with creating my own fields before. So that's something I learned today. But this really is very important, especially for stuff that are newer, because really, we don't have any, any kind of documentation around how reports are generated. You know, most of us just go through the code and debug and try to understand. So this one is actually very, very helpful. Irene. Yes, thank you. And then, yep, the last thing I forgot is I think everybody has some dashboard, dashboard is using the system report. So system report is a report that's also in our report table, but you cannot modify it. It's part of here, like, right now it's a mixed system report and non system report. But the way system report is, so we need to insert the system report manually, because we don't want the user to delete or modify. All the system reports exist in the TBL report table with a report ID less than something. So all of these 200, 500, I think even I don't know about 1000. Yeah, I think to 1000, wow, we can't have any more dashboards. So if it reaches 1000, that's our regular reports. So anything less than 1000 is a system report, and then with the system report, the fields that stored in here also contain system for contain fields for each system report. So they're actually here, you can look at the report ID and know that they belong to system report. So since they we can't modify it, we have to insert them, the report engine will not go in and generate this because of system report. Sorry, I keep going back. You guys find this useful? Heck yeah, absolutely. This is awesome. Thank you, Irene. Oh, thank you. Yeah, the thanks, Irene. Maybe you have a way to summarize this presentation. So it's an easy read, but maybe that's something for later. Oh, we certainly do. So the video cannot transcribe into a documentation automatically. Yeah, alternative to documentation. I think that's impossible. So, you know, we don't have technology for that yet. The chat GPT, the AI won't do that. What is that again? The AI that Josh and Ellen are doing the AI project won't do that? No idea what that is. Yeah, I don't think we can do that. This is great. Thank you, Irene. Thank you. Thanks, Irene. Bye.
